#include <stdio.h>
#include <stdlib.h>

void swap(int inputData[], int i, int j) {
    int temp = inputData[i];
    inputData[i] = inputData[j];
    inputData[j] = temp;
}

void MaxHeapify(int inputData[], int heapSize, int rootIndex) {
    int largest = rootIndex;
    int leftChild = 2 * rootIndex + 1;
    int rightChild = 2 * rootIndex + 2;

    if (leftChild < heapSize && inputData[leftChild] > inputData[largest]) {
        largest = leftChild;
    }
    if (rightChild < heapSize && inputData[rightChild] > inputData[largest]) {
        largest = rightChild;
    }

    if (largest != rootIndex) {
        swap(inputData, rootIndex, largest);
        MaxHeapify(inputData, heapSize, largest);
    }
}

void BuildMaxHeapAndSort(int inputData[], int n) {
    // 첫 요소부터 차례대로 삽입하고, 상태를 출력
    for (int i = 0; i < n; i++) {
        // 최대 힙 재정렬
        for (int j = (i - 1) / 2; j >= 0; j--) {
            MaxHeapify(inputData, i + 1, j);
        }

        // 현재 상태 출력
        for (int k = 0; k <= i; k++) {
            printf("%d ", inputData[k]);
        }
        printf("\n");
    }

    // 힙 정렬
    for (int i = n - 1; i > 0; i--) {
        // 최대값(루트)을 배열의 끝으로 보내고 힙 크기를 하나 줄임
        swap(inputData, 0, i);

        // 힙 재정렬
        MaxHeapify(inputData, i, 0);

        // 힙 재정렬 후 상태 출력
        for (int j = 0; j < i; j++) {
            printf("%d ", inputData[j]);
        }
        printf("\n");
    }
}

int main() {
    int inputData[] = { 34, 12, 76, 59, 32, 55, 88, 26, 16, 79, 35, 85, 29, 78, 41, 56, 86 };
    int size = sizeof(inputData) / sizeof(inputData[0]);

    // 힙 정렬 실행
    printf("<Sort>\n");
    BuildMaxHeapAndSort(inputData, size);

    // 정렬된 결과 출력
    printf("\nSorted Array:\n");
    for (int i = 0; i < size; i++) {
        printf("%d ", inputData[i]);
    }
    printf("\n");

    return 0;
}
